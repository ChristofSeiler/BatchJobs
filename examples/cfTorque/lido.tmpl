<%
walltime = coalesce(resources$walltime, 60 * 60) ## default 1 hour
memory = coalesce(resources$memory, 1024) ## default 1G
nodes = coalesce(resources$nodes, 1L) ## default to 1 node
## we have two different R versions on LiDO installed, one with GCC
## and the other with the Intel compilers. Some packages fail to build
## with ICC, but R compiled with ICC is in general faster.
compiler = coalesce(resources$compiler, "icc")

walltime = convertInteger(walltime)
memory = convertInteger(memory)
nodes = convertInteger(nodes)

d = setdiff(names(resources), c("walltime", "memory", "nodes", "compiler"))
if (length(d) > 0)
  stopf("Illegal resources used: %s", collapse(d))
checkArg(walltime, "integer", len=1L, na.ok=FALSE, lower=60, upper=60*60*24*28)
checkArg(memory, "integer", len=1L, na.ok=FALSE, lower=1, upper=64*1024)
checkArg(nodes, "integer", len=1L, na.ok=FALSE, lower=1)
checkArg(compiler, choices=c("gcc", "icc"))

cmd = "R CMD BATCH --no-save --no-restore"
if(nodes > 1L) 
    cmd = paste("mpirun -np 1", cmd)

## choose a suitable queue for job
s2 = ifelse(memory <= 16*1024, "eth", "quad")
day = 3600 * 24
s1 = if (walltime <= 3600) {
  "short"
} else if (walltime <= 8 * 3600) {
  "med"
} else if (walltime <= 2 * day) {
  "long"
} else if (walltime <= 28 * day) {
  "ultralong"
}
if (s1 == "ultralong" && s2 == "quad")  
  stop("No 'ultralong_quad' queue available. Reduce memory or walltime.")
queue = paste(s1, s2, sep="_")

## get the right software modules to load depending on
## parallelization (nodes > 1) and compiler
modules = switch(compiler,
  "icc" = c("openmpi/ge/intel11.1/64/1.4.2", "intel/cce/11.1.075", "intel/fce/11.1.075", "R/2.14.1-icc"),
  "gcc" = c("openmpi/ge/gcc4.3.5/64/1.4.2", "gcc/4.3.5", "R/2.14.1-gcc"))
if(nodes == 1L)
  modules = modules[-1]
modules = collapse(modules, sep=" ")
-%>

#PBS -N <%= job.name %>
#PBS -j oe
#PBS -o <%= log.file %>
#PBS -l walltime=<%= walltime %>,nodes=<%= nodes %>,pvmem=<%= memory %>M
#PBS -q <%= queue %>

## setup modules
source /sysdata/shared/sfw/Modules/default/init/bash
module add <%= modules %>

## create our own temp dir and clean it up later, lido does not do this automatically 
mkdir /scratch/${USER}-${PBS_JOBID}
export TMPDIR=/scratch/${USER}-${PBS_JOBID}
## run R
<%= cmd %> "<%= rscript %>" /dev/stdout
rm -fR /scratch/${USER}-${PBS_JOBID}
