#!/bin/bash

## ssh-helper: Helper for the SSH cluster functions of the BatchJobs R
##   package.
##
## Requires the following Unix command line utilities:
##
##  * grep, wc, ps, kill, uptime, echo, cat
##
## The following commands are implemented. First argument is always the command name.
## For other arguments see below. Each command returns a character vector.
## 
## number-of-cpus
##  Return the number of PEs on worker.
##
## start-job RHOME RFILE OUTFILE
##   Start an R CMD BATCH process running $RFILE and log
##   the output in $OUTFILE. 
##   RHOME is the path to the R installtion..
##   Returns: PID of sh process which spawned R. We use that as batch.job.id. 
##
## kill-job PID
##   Kill the R job with PPID $PID. The PPID is of the sh process returned by start-job.
##   First a TERM is sent, then 1 sec delay, then KILL. 
## 
## load-and-rprocs
##   Return char vector:
##    1st line: Result of uptime.
##    rest lines: For all R processes with ps: PPID<SPACE>PCPU<SPACE>CMD  

CMD="$1"; shift
LC_ALL=C ## Avoid any localization issues.

case $CMD in
    number-of-cpus)
        cat /proc/cpuinfo | grep '^processor' | wc -l
        ;;
    start-job)
        RHOME="$1"
        if [ -n "$RHOME" ]; then
            RCMD="$RHOME/bin/R"
        else
            RCMD="R"
        fi
        # nothing should be on all 3 streams except maybe a segfault. throw away. 
        # see comment also in cfLocal
        "$RCMD" CMD BATCH --no-save --no-restore "$2" "$3" \
            > /dev/null 2> /dev/null < /dev/null &
        echo $!
        ;;
    kill-job)
        kill -TERM $(ps -o pid= --ppid $1)  > /dev/null 2> /dev/null
        sleep 1
        kill -KILL $(ps -o pid= --ppid $1)  > /dev/null 2> /dev/null
        exit 0
        ;;
    uptime-and-rprocs)
        uptime
        # use ww for unlimited width in ps for cmd output
        ps -ww -o ppid=,pcpu=,cmd= -C R
        ;;
    *)
esac
